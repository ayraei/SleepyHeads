import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;

/** Sort data into different files. **/
public class SortDataApp {
	/** Location of index file **/
	private static String iFileLoc = 
			"/Users/debranangel/Documents/2014-15/CNS156b/um/all.idx";

	/** Location of data file **/
	private static String dFileLoc = 
			"/Users/debranangel/Documents/2014-15/CNS156b/um/all.dta";

	/** Training set prefix **/
	private static String TRAIN_FILE = "training.dta";

	/** Probe set prefix **/
	private static String PROBE_FILE = "probe.dta";

	/** Testing set prefix **/
	private static String TEST_FILE = "test.dta";

	/** Collection of indices **/
	LinkedList<Integer> indices;

	/** Constructor **/
	public SortDataApp() {
		this.indices = new LinkedList<Integer>();
	}

	public static void main(String[] args) {
		SortDataApp app = new SortDataApp();
		BufferedReader br = null;

		/* Read from file of indices */
		String line;
		try {
			br = new BufferedReader(new FileReader(iFileLoc));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		try {
			while ((line = br.readLine()) != null) {
				app.indices.add(Integer.parseInt(line));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		/* Read from data file */
		try {
			br = new BufferedReader(new FileReader(dFileLoc));

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		try {
			PrintWriter trnOut = new PrintWriter(TRAIN_FILE, "UTF-8");
			PrintWriter prbOut = new PrintWriter(PROBE_FILE, "UTF-8");
			PrintWriter tstOut = new PrintWriter(TEST_FILE, "UTF-8");
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			while ((line = br.readLine()) != null) {
				for (Integer i:app.indices) {
					switch(i) {
					case 1: 
						
						break;

					case 2: 
						break;

					case 3: 
						break;

					case 4: 
						break;

					case 5: 
						break;
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
